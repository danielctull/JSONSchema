#if !canImport(ObjectiveC)
import XCTest

extension BooleanTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BooleanTests = [
        ("test_decode", test_decode),
    ]
}

extension IntegerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IntegerTests = [
        ("test_decode_exclusiveMaximum", test_decode_exclusiveMaximum),
        ("test_decode_exclusiveMinimum", test_decode_exclusiveMinimum),
        ("test_decode_maximum", test_decode_maximum),
        ("test_decode_minimum", test_decode_minimum),
        ("test_decode_multipleOf", test_decode_multipleOf),
        ("test_decode_noValues", test_decode_noValues),
        ("test_encode_exclusiveMaximum", test_encode_exclusiveMaximum),
        ("test_encode_exclusiveMinimum", test_encode_exclusiveMinimum),
        ("test_encode_maximum", test_encode_maximum),
        ("test_encode_minimum", test_encode_minimum),
        ("test_encode_multipleOf", test_encode_multipleOf),
        ("test_encode_noValues", test_encode_noValues),
    ]
}

extension NullTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NullTests = [
        ("test_decode", test_decode),
    ]
}

extension NumberTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NumberTests = [
        ("test_decode_exclusiveMaximum", test_decode_exclusiveMaximum),
        ("test_decode_exclusiveMinimum", test_decode_exclusiveMinimum),
        ("test_decode_maximum", test_decode_maximum),
        ("test_decode_minimum", test_decode_minimum),
        ("test_decode_multipleOf", test_decode_multipleOf),
        ("test_decode_noValues", test_decode_noValues),
        ("test_encode_exclusiveMaximum", test_encode_exclusiveMaximum),
        ("test_encode_exclusiveMinimum", test_encode_exclusiveMinimum),
        ("test_encode_maximum", test_encode_maximum),
        ("test_encode_minimum", test_encode_minimum),
        ("test_encode_multipleOf", test_encode_multipleOf),
        ("test_encode_noValues", test_encode_noValues),
    ]
}

extension ObjectTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ObjectTests = [
        ("test_decode_", test_decode_),
        ("test_decode_noValues", test_decode_noValues),
        ("test_decode_required", test_decode_required),
    ]
}

extension SchemaTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SchemaTests = [
        ("testHasSchema", testHasSchema),
        ("testNoSchema", testNoSchema),
    ]
}

extension StringTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringTests = [
        ("test_decode_allValues", test_decode_allValues),
        ("test_decode_maximumLength", test_decode_maximumLength),
        ("test_decode_minimumLength", test_decode_minimumLength),
        ("test_decode_noValues", test_decode_noValues),
        ("test_decode_pattern", test_decode_pattern),
        ("test_encode_allValues", test_encode_allValues),
        ("test_encode_maximumLength", test_encode_maximumLength),
        ("test_encode_minimumLength", test_encode_minimumLength),
        ("test_encode_noValues", test_encode_noValues),
        ("test_encode_pattern", test_encode_pattern),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(BooleanTests.__allTests__BooleanTests),
        testCase(IntegerTests.__allTests__IntegerTests),
        testCase(NullTests.__allTests__NullTests),
        testCase(NumberTests.__allTests__NumberTests),
        testCase(ObjectTests.__allTests__ObjectTests),
        testCase(SchemaTests.__allTests__SchemaTests),
        testCase(StringTests.__allTests__StringTests),
    ]
}
#endif
